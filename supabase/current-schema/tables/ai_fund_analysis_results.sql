-- AI Fund Analysis Results table
CREATE TABLE ai_fund_analysis_results (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    analysis_id bigint REFERENCES ai_fund_analyzing_data(id) ON DELETE CASCADE NOT NULL,
    openai_response text,
    status character varying(50) DEFAULT 'pending'::character varying NOT NULL,
    error_message text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    
    CONSTRAINT ai_fund_analysis_results_status_check CHECK (status IN ('pending', 'completed', 'failed'))
);

-- Indexes for ai_fund_analysis_results
CREATE INDEX ai_fund_analysis_results_analysis_id_idx ON ai_fund_analysis_results USING btree (analysis_id);
CREATE INDEX ai_fund_analysis_results_status_idx ON ai_fund_analysis_results USING btree (status);
CREATE INDEX ai_fund_analysis_results_created_at_idx ON ai_fund_analysis_results USING btree (created_at DESC);

-- RLS for ai_fund_analysis_results
ALTER TABLE ai_fund_analysis_results ENABLE ROW LEVEL SECURITY;

-- Policies for ai_fund_analysis_results
CREATE POLICY "Users can view ai fund analysis results" ON ai_fund_analysis_results
FOR SELECT USING (
    analysis_id IN (
        SELECT id FROM ai_fund_analyzing_data 
        WHERE matter_id IN (
            SELECT matter_id 
            FROM workspace_access 
            WHERE shared_with_user_id = auth.uid()
        )
    )
);

CREATE POLICY "Users can create ai fund analysis results" ON ai_fund_analysis_results
FOR INSERT WITH CHECK (
    analysis_id IN (
        SELECT id FROM ai_fund_analyzing_data 
        WHERE matter_id IN (
            SELECT matter_id 
            FROM workspace_access 
            WHERE shared_with_user_id = auth.uid() 
            AND access_type = 'edit'
        )
    )
);

CREATE POLICY "Users can update ai_fund_analysis_results" ON ai_fund_analysis_results
FOR UPDATE USING (
    analysis_id IN (
        SELECT id FROM ai_fund_analyzing_data 
        WHERE matter_id IN (
            SELECT matter_id 
            FROM workspace_access 
            WHERE shared_with_user_id = auth.uid() 
            AND access_type = 'edit'
        )
    )
);

CREATE POLICY "Users can delete ai fund analysis results" ON ai_fund_analysis_results
FOR DELETE USING (
    analysis_id IN (
        SELECT id FROM ai_fund_analyzing_data 
        WHERE matter_id IN (
            SELECT matter_id 
            FROM workspace_access 
            WHERE shared_with_user_id = auth.uid() 
            AND access_type = 'edit'
        )
    )
);

-- Add trigger for updated_at
CREATE TRIGGER handle_updated_at 
  BEFORE UPDATE ON ai_fund_analysis_results
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

-- Comments for documentation
COMMENT ON TABLE ai_fund_analysis_results IS 'LLM analysis results linked to ai_fund_analyzing_data.
Each record represents an LLM response attempt for a specific analysis request.
Multiple results can exist for one analysis (retry scenarios).';

COMMENT ON COLUMN ai_fund_analysis_results.analysis_id IS 'Foreign key to ai_fund_analyzing_data table';
COMMENT ON COLUMN ai_fund_analysis_results.openai_response IS 'The response received from OpenAI API';
COMMENT ON COLUMN ai_fund_analysis_results.status IS 'Processing status: pending, completed, failed';
COMMENT ON COLUMN ai_fund_analysis_results.error_message IS 'Error message if the OpenAI request failed'; 