    CREATE TABLE goals (
      created_at timestamp with time zone DEFAULT now() NOT NULL,
      updated_at timestamp with time zone DEFAULT now() NOT NULL,
      created_by uuid,
      related_files jsonb,
      workspace_id bigint,
      id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      title character varying NOT NULL,
      description text,
      status character varying,
      priority character varying,
      due_date timestamp with time zone,
      completion_percentage integer DEFAULT 0 CHECK (completion_percentage >= 0 AND completion_percentage <= 100),
      archived BOOLEAN DEFAULT false,
      archived_by uuid REFERENCES auth.users(id),
      archived_at TIMESTAMP WITH TIME ZONE
    );
    
    -- Indexes for goals
    CREATE INDEX goals_created_by_idx ON public.goals USING btree (created_by);
    CREATE INDEX goals_status_idx ON public.goals USING btree (status); 
    CREATE INDEX goals_due_date_idx ON public.goals USING btree (due_date);
    CREATE INDEX goals_workspace_id_idx ON public.goals USING btree (workspace_id);
    CREATE INDEX goals_archived_idx ON goals(archived);
    CREATE INDEX goals_archived_by_idx ON goals(archived_by);
    
    -- RLS for goals
    ALTER TABLE goals ENABLE ROW LEVEL SECURITY;
    
    -- Policies for goals
    CREATE POLICY "Users can view goals" ON goals
    FOR SELECT USING (
      workspace_id IN (
        SELECT workspace_id FROMworkspace_access WHERE shared_with_user_id = auth.uid()
      )
    );

    CREATE POLICY "Users can edit goals" ON goals
    FOR UPDATE USING (
      workspace_id IN (
        SELECT workspace_id FROMworkspace_access 
        WHERE shared_with_user_id = auth.uid() AND access_type = 'edit'
      )
    );

    CREATE POLICY "Users can create goals" ON goals
    FOR INSERT WITH CHECK (
      workspace_id IN (
        SELECT workspace_id FROMworkspace_access 
        WHERE shared_with_user_id = auth.uid() AND access_type = 'edit'
      )
    );

    CREATE POLICY "Users can delete goals" ON goals
    FOR DELETE USING (
      workspace_id IN (
        SELECT workspace_id FROMworkspace_access 
        WHERE shared_with_user_id = auth.uid() AND access_type = 'edit'
      )
    );
    
    CREATE TABLE goal_comments (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      goal_id BIGINT REFERENCES goals(id) ON DELETE CASCADE,
      created_by UUID REFERENCES auth.users(id),
      content TEXT NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      type TEXT NOT NULL DEFAULT 'comment',
      metadata JSONB,
      comment_edit_history JSONB[] DEFAULT NULL,
      archived BOOLEAN DEFAULT false
    );

    COMMENT ON COLUMN goal_comments.comment_edit_history IS 'Array of JSONB objects containing edit history of comments. Each object includes: previous_content, edited_at timestamp, and edited_by user ID';

    -- Index for faster lookups
    CREATE INDEX goal_comments_goal_id_idx ON goal_comments(goal_id);
    CREATE INDEX goal_comments_created_by_idx ON goal_comments(created_by);

    -- Enable RLS
    ALTER TABLE goal_comments ENABLE ROW LEVEL SECURITY;

    -- Policies
    CREATE POLICY "Users can view comments on goals they have access to" 
    ON goal_comments
    AS PERMISSIVE
    FOR SELECT
    TO authenticated 
    USING (
      goal_id IN (
        SELECT g.id FROM goals g
        WHERE g.workspace_id IN (
          SELECT workspace_id FROMworkspace_access WHERE shared_with_user_id = auth.uid()
        )
      )
    );

    CREATE POLICY "Users can create comments on goals they have edit access to" 
    ON goal_comments
    AS PERMISSIVE
    FOR INSERT 
    TO authenticated 
    WITH CHECK (
      goal_id IN (
        SELECT g.id FROM goals g
        WHERE g.workspace_id IN (
          SELECT workspace_id FROMworkspace_access WHERE shared_with_user_id = auth.uid()
        )
      )
    );

    CREATE POLICY "Users can update any comments on goals they have access to" 
    ON goal_comments
    AS PERMISSIVE
    FOR UPDATE 
    TO authenticated 
    USING (
      goal_id IN (
        SELECT g.id FROM goals g
        WHERE g.workspace_id IN (
          SELECT workspace_id FROMworkspace_access WHERE shared_with_user_id = auth.uid()
        )
      )
    );
    
    -- Add constraint to ensure consistency
    ALTER TABLE goals
    ADD CONSTRAINT archive_consistency CHECK (
      (archived = false AND archived_by IS NULL AND archived_at IS NULL) OR
      (archived = true AND archived_by IS NOT NULL AND archived_at IS NOT NULL)
    );
    
