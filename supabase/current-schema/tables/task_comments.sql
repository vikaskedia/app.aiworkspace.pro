CREATE TABLE task_comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  task_id BIGINT REFERENCES tasks(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id),
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  type TEXT NOT NULL DEFAULT 'comment',
  metadata JSONB,
  comment_edit_history JSONB[] DEFAULT NULL
);

COMMENT ON COLUMN task_comments.comment_edit_history IS 'Array of JSONB objects containing edit history of comments. Each object includes: previous_content, edited_at timestamp, and edited_by user ID';


-- Index for faster lookups
CREATE INDEX task_comments_task_id_idx ON task_comments(task_id);
CREATE INDEX task_comments_user_id_idx ON task_comments(user_id);

-- Enable RLS
ALTER TABLE task_comments ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Users can view comments on tasks they have access to" 
ON task_comments
AS PERMISSIVE
FOR SELECT
TO authenticated 
USING (
  task_id IN (
    SELECT t.id FROM tasks t
    WHERE t.workspace_id IN (
      SELECT workspace_id FROMworkspace_access WHERE shared_with_user_id = auth.uid()
    )
  )
);

CREATE POLICY "Users can create comments on tasks they have edit access to" 
ON task_comments
AS PERMISSIVE
FOR INSERT 
TO authenticated 
WITH CHECK (
  task_id IN (
    SELECT t.id FROM tasks t
    WHERE t.workspace_id IN (
      SELECT workspace_id FROMworkspace_access WHERE shared_with_user_id = auth.uid()
    )
  )
);

-- Replace the existing update policy with this one
CREATE POLICY "Users can update any comments on tasks they have access to" 
ON task_comments
AS PERMISSIVE
FOR UPDATE 
TO authenticated 
USING (
  task_id IN (
    SELECT t.id FROM tasks t
    WHERE t.workspace_id IN (
      SELECT workspace_id FROMworkspace_access WHERE shared_with_user_id = auth.uid()
    )
  )
);

ALTER TABLE task_comments
ADD COLUMN archived BOOLEAN DEFAULT false;
